import java.security.*
import javax.crypto.*
import javax.crypto.spec.*

buildscript {
	repositories {
		mavenCentral()
		jcenter()
		maven {
			url 'https://plugins.gradle.org/m2/'
		}
	}

	dependencies {
		classpath 'org.akhikhl.gretty:gretty:+'
		classpath 'com.bmuschko:gradle-cargo-plugin:2.2.1'
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'war'
apply plugin: 'pmd'
apply plugin: 'maven-publish'
apply plugin: 'org.akhikhl.gretty'
apply plugin: 'com.bmuschko.cargo'

sourceCompatibility = 1.7
targetCompatibility = 1.7

archivesBaseName='Quickbooks'
group='org.qbwebconnect'

tasks.withType(Pmd) {
	reports {
		xml.enabled = false
		html.enabled = true
	}
}

def env = project.hasProperty('env') ? project.getProperty('env') : 'uat'
def configFile = file("$rootDir/gradle/config/buildConfig.groovy")
def parsedConfig = new ConfigSlurper(env).parse(configFile.toURL())

allprojects {
	apply from: "$rootDir/gradle/versioning.gradle"
	ext.config = parsedConfig
}

ext.fullRepoUrl = "$config.binaryRepository.url/$config.binaryRepository.name"

repositories {
    mavenCentral()
	jcenter()
    maven { url fullRepoUrl }
}

configurations {
	remoteArchive.extendsFrom runtime
}

dependencies {
	ext {
		springVersion='3.2.10.RELEASE'
	}	
	providedCompile 'javax.servlet:servlet-api:2.5'

    compile group: 'org.springframework', name: 'spring-aop', version: springVersion
    compile group: 'org.springframework', name: 'spring-beans', version: springVersion
    compile group: 'org.springframework', name: 'spring-context', version: springVersion
    compile group: 'org.springframework', name: 'spring-core', version: springVersion
    compile group: 'org.springframework', name: 'spring-expression', version: springVersion
    compile group: 'org.springframework', name: 'spring-web', version: springVersion
    compile group: 'org.springframework', name: 'spring-webmvc', version: springVersion
    compile group: 'org.springframework', name: 'spring-test', version: springVersion

	compile ("com.mozu:mozu-api-toolkit:1.0.7") {
		exclude group: 'javax.sql'
		exclude group: 'javax.transaction'
	}
	
    compile ("com.mozu:mozu-api-java:1.11.4") {
        exclude group: 'mysql'
        exclude group: 'xerces'
        exclude group: 'berkeleydb'
        exclude group: 'hsqldb'
        exclude group: 'tomcat'
		exclude group: 'javax.sql'
		exclude group: 'javax.transaction'
		exclude group: 'javax.servlet'
        
        changing = true
    }
    
	compile ("org.slf4j:slf4j-api:1.7.5")
	compile ("org.slf4j:slf4j-log4j12:1.7.5")
	compile ('log4j:log4j:1.2.17')
    compile ('org.modelmapper:modelmapper-parent:1.0.1')
    compile ('org.modelmapper:modelmapper:0.6.2')
    compile ('org.thymeleaf:thymeleaf:2.1.3.RELEASE')
    compile ('org.thymeleaf:thymeleaf-spring3:2.1.3.RELEASE')
    
    compile ('org.apache.axis:axis:1.4')
    compile ('javax.xml:jaxrpc-api:1.1')
    compile	('javax.xml.ws:jaxws-api:2.2.6')
    compile ('javax.xml.soap:javax.xml.soap-api:1.3.5')
    compile ('wsdl4j:wsdl4j:1.6.3')
    compile ('org.jdom:jdom:2.0.0')
    compile ('commons-discovery:commons-discovery:0.4')
    compile ('commons-logging:commons-logging:1.2')
    compile ('org.springframework.ws:spring-ws:2.1.4.RELEASE')
    compile ('org.springframework.ws:spring-ws-core:2.2.0.RELEASE')
    compile ('org.jasypt:jasypt:1.9.2')
    
    
    testCompile group: 'junit', name: 'junit', version: '4.+'

	remoteArchive "$project.group:$project.archivesBaseName:$project.version"
}

pmd {
	ignoreFailures = true
}

test {
    systemProperties 'property': 'value'
}

publishing {
	publications {
		webApp(MavenPublication) {
			artifactId "$project.archivesBaseName"
			from components.web
		}
	}

	repositories {
		maven {
			url fullRepoUrl

			credentials {
				username = config.binaryRepository.username
				password = config.binaryRepository.password
			}
		}
	}
}

cargoUndeployRemote {
	onlyIf {
		String url = "http://" + config.server.hostname + ":" + config.server.port + "/" + config.server.context
		println 'tomcat url -- ' + url

		url.toURL().openConnection().with {
			conn -> readTimeout = 10000
			return responseCode == 200
		}
	}
}

cargo {
	containerId = 'tomcat7x'
	port = config.server.port

	deployable {
		file = file("$buildDir/download/$project.group:$project.archivesBaseName:$project.version")
		context = config.server.context
	}

	remote {
		protocol = 'https'
		hostname = config.server.hostname
		username = config.server.username
		password = config.server.password
	}
}

gretty {
	servletContainer = 'jetty9'
	httpEnabled = true
	managedClassReload=true
	fastReload=true
	contextPath='/Quickbooks'
	jvmArgs=['-Dcustom.logging.root=/tmp']
}

task downloadBinaryArchive(type:Copy) {
	from configurations.remoteArchive
	into "$buildDir/download"
}

task createBuildInfoFile << {
	def buildInfoFile = new File("$buildDir/build-info.properties")
	Properties props = new Properties()
	props.setProperty('version', project.version.toString())
	props.setProperty('timestamp', project.buildTimestamp)
	props.store(buildInfoFile.newWriter(), null)
}

war {
	dependsOn createBuildInfoFile

	from(buildDir) {
		include 'build-info.properties'
		into('WEB-INF/classes')
	}
}

cargoDeployRemote.dependsOn downloadBinaryArchive, cargoUndeployRemote

task wrapper(type: Wrapper) {
    gradleVersion = '2.9'
}

// crypto helpers
def getKey() {
	if(hasProperty('aes128key')) {
		return aes128key.decodeBase64()
	}

	return ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p']
}

def encode(target) {
	def cipher = getCipher(Cipher.ENCRYPT_MODE)
	return cipher.doFinal(target.bytes).encodeBase64()
}

def decode(target) {
	def cipher = getCipher(Cipher.DECRYPT_MODE)
	return new String(cipher.doFinal(target.decodeBase64()))
}

def getCipher(mode) {
	def keySpec = new SecretKeySpec(getKey(), 'AES')
	def cipher = Cipher.getInstance('AES')
	def keyFactory = SecretKeyFactory.getInstance('AES')
	cipher.init(mode, keyFactory.generateSecret(keySpec))
	return cipher
}
